- Reducers are pure functions that takes state and action as an input and return a new State.
- Store and it is immutable and there is only 1.
- Actions describes a user intent and trigger changes.
- Actions
  - have a type property that describes the action
  - the rest can be anything else
  -
- Reducers
  - there is an app reducer defined. This main reducers takes all the actions that comes in then calls the appropriate reducer for the action.
  - The reducer takes state and action and returns a new state. (like a meat grinder )
  - Reducers must be a pure function.
   - You know if you have one when the same arguments always return the same values
    - Forbidden in Reducers
      - Mutate arguments
      - Perform side effects (Perform API Calls / routing transitions )
      - Call non-pure functions (Date.now() or Math.Random())

- Store
  - It is updated once the reducer returns the new state via React-Redux

- Redux Flow
  1. A user makes an action. An action is created with its type and data.
  2. A reducers receive the current state as an action and returns the new state.
  3. Once the new state is returned, any component that is using the data is re-rendered.

Immutability
- You cannot change existing objects instead you must return a new object.
- Javascript primitives are immutable already!
- Reasons
  - Clarity
    - Every state change happens in a reducer so you know exatcly what changed the state.
  - Performance
    - Because it is immutable, Redux knows to notify react of state changes by simply doing a reference  check (prevStoreState !== storeState) instead of doing the expensive operation of checkng every property in the object for a difference.
  - Awesome Sauce (Amazing debugging)
    - time travel debugging
- How do I enforce immutability? (options) *** could cause bug if a state is mutated.
  - Trust (no enforcement)
  - Redux-immutable-state-invariant
    - it is a safety net
    - it displays a warning if an object is changed.
    - it does alot of object copying and degrades performance if enable in production, so only use in dev.
  - immutable.js library
    - programmatically enforces it
    - create immutable data-structures
    - "there is a lot going on" - training person

Spread operator gives us the ability to be expanded anywhere multiple arguments are allowed:
- multiple arguments for function calls
- multiple elements for array literals (we used it copy arrays in our reducers)
- multple variables for destructing assignment.

A reducer is just a function that receives a state and an action and returns a new state.

- Container components (connects to the store)
 - Parts of containers
  - Constructor. Initialize state and bind functions
  - Child functions. Called by render
  - Render functions. It is recommended to  keep the mark up separate and should be called by a child component.
 -  Prop types. For validations
 -  Redux connect and related functions.  Maps for StateToProps and DispatchToProps



***BUG***
when you click refresh on one of the courses after updating it. It sets the state back to where it was instead of reloading with the updated state.

**TESTING**
Two Goals
1. Test Markup - Markup belongs in presentation components so the only reference to a container component should be child components
2. Test Behavior - Given a click, scroll, drag, change... what happens? do we get expected behavior.

To Test a container component (they dont return a component since they are wrapped in a call to connect):
 1. Wrap with <Provider>  to create/mock your own store in the test.
 2. Add a named export for the component so that it is able to be called.

Shallow - renders the child component 1 level deep.
Mount - renders all child components (Slower)

If you need to test mapStateToProps - Consider extracting the complicated pieces into seperate selectors (pure functions - easy to test)
 - also consider using Reselect if the function is expensive to run.
